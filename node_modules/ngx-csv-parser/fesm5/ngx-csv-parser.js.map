{"version":3,"file":"ngx-csv-parser.js","sources":["ng://ngx-csv-parser/lib/_model/ngx-csv-parser-error.interface.ts","ng://ngx-csv-parser/lib/ngx-csv-parser.service.ts","ng://ngx-csv-parser/lib/ngx-csv-parser.component.ts","ng://ngx-csv-parser/lib/ngx-csv-parser.module.ts","ng://ngx-csv-parser/public-api.ts","ng://ngx-csv-parser/ngx-csv-parser.ts"],"sourcesContent":["export class NgxCSVParserError {\r\n    type: string;     // A generalization of the error\r\n    code: number;     // Standardized error code\r\n    message: string;  // Human-readable details\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { NgxCSVParserError } from './_model/ngx-csv-parser-error.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxCsvParser {\r\n\r\n    constructor() {\r\n        console.log(`\r\n      *****************************************************\r\n      ***      For Custom Software/Web development      ***\r\n      *** Reach out to us at contact@developershive.com ***\r\n      ***  Support us https://patreon.com/tofiqquadri/  ***\r\n      ***     Visit us at https://developershive.com    ***\r\n      *****************************************************\r\n    `);\r\n    }\r\n\r\n    private defaultCSVParserConfig = {\r\n        header: true,\r\n        delimiter: ','\r\n    };\r\n\r\n    parse(csvFile: File, config: CSVParserConfig): Observable<Array<any> | NgxCSVParserError> {\r\n\r\n        config = {\r\n            ...this.defaultCSVParserConfig,\r\n            ...config\r\n        };\r\n\r\n        const ngxCSVParserObserver = new Observable((observer: Observer<Array<any> | NgxCSVParserError>) => {\r\n            try {\r\n                let csvRecords = null;\r\n\r\n                if (this.isCSVFile(csvFile)) {\r\n\r\n                    const reader = new FileReader();\r\n                    reader.readAsText(csvFile);\r\n\r\n                    reader.onload = () => {\r\n                        const csvData = reader.result;\r\n                        const csvRecordsArray = this.csvStringToArray((csvData as string).trim(), config.delimiter);\r\n\r\n                        const headersRow = this.getHeaderArray(csvRecordsArray);\r\n\r\n                        csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\r\n\r\n                        observer.next(csvRecords);\r\n                        observer.complete();\r\n                    };\r\n\r\n                    reader.onerror = () => {\r\n                        this.badCSVDataFormatErrorHandler(observer);\r\n                    };\r\n\r\n                } else {\r\n                    this.notCSVFileErrorHandler(observer);\r\n                }\r\n\r\n            } catch (error) {\r\n                this.unknownCSVParserErrorHandler(observer);\r\n            }\r\n        });\r\n\r\n        return ngxCSVParserObserver;\r\n    }\r\n\r\n    csvStringToArray(csvDataString: string, delimiter: string) {\r\n        const regexPattern = new RegExp((`(\\\\${delimiter}|\\\\r?\\\\n|\\\\r|^)(?:\\\"((?:\\\\\\\\.|\\\"\\\"|[^\\\\\\\\\\\"])*)\\\"|([^\\\\${delimiter}\\\"\\\\r\\\\n]*))`), \"gi\")\r\n        let matchedPatternArray = regexPattern.exec(csvDataString);\r\n        const resultCSV = [[]];\r\n        while (matchedPatternArray) {\r\n            if (matchedPatternArray[1].length && matchedPatternArray[1] !== delimiter) {\r\n                resultCSV.push([]);\r\n            }\r\n            const cleanValue = matchedPatternArray[2] ?\r\n                matchedPatternArray[2].replace(new RegExp(\"[\\\\\\\\\\\"](.)\", \"g\"), '$1') : matchedPatternArray[3];\r\n            resultCSV[resultCSV.length - 1].push(cleanValue);\r\n            matchedPatternArray = regexPattern.exec(csvDataString);\r\n        }\r\n        return resultCSV;\r\n    }\r\n\r\n    getDataRecordsArrayFromCSVFile(csvRecordsArray: any, headerLength: any, config: any) {\r\n        const dataArr = [];\r\n        const headersArray = csvRecordsArray[0];\r\n\r\n        const startingRowToParseData = config.header ? 1 : 0;\r\n\r\n        for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\r\n            const data = csvRecordsArray[i];\r\n\r\n            if (data.length === headerLength && config.header) {\r\n\r\n                const csvRecord = {};\r\n\r\n                for (let j = 0; j < data.length; j++) {\r\n                    if ((data[j] === undefined) || (data[j] === null)) {\r\n                        csvRecord[headersArray[j]] = \"\";\r\n                    } else {\r\n                        csvRecord[headersArray[j]] = data[j].trim();\r\n                    }\r\n                }\r\n                dataArr.push(csvRecord);\r\n            } else {\r\n                dataArr.push(data);\r\n            }\r\n        }\r\n        return dataArr;\r\n    }\r\n\r\n    isCSVFile(file: any) {\r\n        return file.name.endsWith('.csv');\r\n    }\r\n\r\n    getHeaderArray(csvRecordsArr: any) {\r\n        const headers = csvRecordsArr[0];\r\n        const headerArray = [];\r\n        for (const header of headers) {\r\n            headerArray.push(header);\r\n        }\r\n        return headerArray;\r\n    }\r\n\r\n    notCSVFileErrorHandler(observer: Observer<any>) {\r\n        const ngcCSVParserError: NgxCSVParserError =\r\n            this.errorBuilder('NOT_A_CSV_FILE', 'Selected file is not a csv File Type.', 2);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n\r\n    unknownCSVParserErrorHandler(observer: Observer<any>) {\r\n        const ngcCSVParserError: NgxCSVParserError =\r\n            this.errorBuilder('UNKNOWN_ERROR', 'Unknown error. Please refer to official documentation for library usage.', 404);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n\r\n    badCSVDataFormatErrorHandler(observer: Observer<any>) {\r\n        const ngcCSVParserError: NgxCSVParserError =\r\n            this.errorBuilder('BAD_CSV_DATA_FORMAT', 'Unable to parse CSV File.', 1);\r\n        observer.error(ngcCSVParserError);\r\n    }\r\n\r\n    errorBuilder(type: string, message: any, code: any): NgxCSVParserError {\r\n        const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n        ngcCSVParserError.type = type;\r\n        ngcCSVParserError.message = message;\r\n        ngcCSVParserError.code = code;\r\n        return ngcCSVParserError;\r\n    }\r\n}\r\n\r\nclass CSVParserConfig {\r\n    header?: boolean;\r\n    delimiter?: string;\r\n\r\n    constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-csv-parser',\n  template: `\n    <p>\n      ngx-csv-parser works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxCsvParserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCsvParserComponent } from './ngx-csv-parser.component';\nimport { NgxCsvParser } from './ngx-csv-parser.service';\n\n@NgModule({\n  declarations: [NgxCsvParserComponent],\n  imports: [\n  ],\n  providers: [NgxCsvParser],\n  exports: [NgxCsvParserComponent]\n})\nexport class NgxCsvParserModule { }\n","/*\n * Public API Surface of ngx-csv-parser\n */\n\nexport * from './lib/ngx-csv-parser.service';\nexport * from './lib/_model/ngx-csv-parser-error.interface';\nexport * from './lib/ngx-csv-parser.component';\nexport * from './lib/ngx-csv-parser.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}